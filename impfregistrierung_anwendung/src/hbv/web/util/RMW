package hbv.web.util;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.json.JSONObject;
import redis.clients.jedis.Jedis;

/*
 * RedisMailWorker ist ein Thread, der Mailjobs aus der Redis-Queue mailQueue verarbeitet
 * - Läuft in einer Endlosschleife und wartet auf neue Jobs in mailQueue
 * - Sobald ein Job gefunden wird, wird er verarbeitet
 * - Die Mail wird nicht direkt gesendet, sondern in sentMails gespeichert (Simulation)
 * - Fehler werden in /tmp/log.txt protokolliert.
 */

public class RedisMailWorker implements Runnable {
  private final JedisAdapter jedisAdapter;

  /*
   * Konstruktor für RedisMailWorker, initialisiert die Verbindung zu Redis
   */
  public RedisMailWorker(String redisHost, int redisPort, String redisPassword) {
    this.jedisAdapter = JedisAdapter.getInstance(redisHost, redisPort, redisPassword);
  }

  /*
   * Hauptthread des Workers
   * - Läuft in einer Endlosschleife und wartet auf Jobs in mailQueue
   * - Sobald ein Job gefunden wird, ruft er processEmail() auf
   */
  @Override
  public void run() {
    //    log("[START] Worker gestartet: " + Thread.currentThread().getName());

    while (true) {
      try (Jedis jedis = jedisAdapter.getJedis()) { // Holt eine Redis-Verbindung
                                                    //      log("[WAIT] Warte auf neue Jobs in mailQueue...");

                                                    // warten auf einen neuen Job (blockiert bis zu 10 Sekunden)
        List<String> job = jedis.brpop(30, "mailQueue");

        if (job == null || job.isEmpty()) {
          // Kleine Pause einlegen, um CPU-Last zu reduzieren
          Thread.sleep(100);
          continue;
        }

        // JSON-String in Map umwandeln für schnellen Zugriff
        if (job != null && job.size() > 1) {
          String jobString = job.get(1);
          // log("[WORK] Verarbeite Job: " + jobString);
          Map<String, String> jobMap = parseJobString(jobString);

          if (jobMap != null) {
            // log("[WORK] Rufe processEmail() auf...");
            processEmail(jobMap.get("email"), jobMap.get("pdf_path"), jobMap.get("booking_id"));
          } else {

            Thread.currentThread().interrupt();
            break;
            // log("[FEHLER] parseJobString() hat NULL zurückgegeben!");
          }
        }
      } catch (Exception e) {
        // log("[FEHLER] Fehler im Worker: " + e.getMessage());
      }
    }
  }

  /*
   * Wandelt einen JSON-String in eine Map um, um die Maildaten zu extrahieren.
   * @param jobString Der JSON-String mit den Maildaten
   * @return Eine Map mit den extrahierten Werten (email, pdf_path, booking_id) oder
   * null, falls Parsing fehlschlägt
   */
  private Map<String, String> parseJobString(String jobString) {
    // log("[Mail-Worker] Job zum Parsen: " + jobString);
    Map<String, String> jobMap = new HashMap<>();

    try {
      JSONObject json = new JSONObject(jobString); // JSON-Parsing mit JSONObject
      jobMap.put("email", json.getString("email"));
      jobMap.put("pdf_path", json.getString("pdf_path"));
      jobMap.put("booking_id", json.getString("booking_id"));
      // log("[OK] Parsing erfolgreich: " + jobMap);
    } catch (Exception e) {
      // log("[FEHLER] Parsing fehlgeschlagen: " + e.getMessage());
    }

    return jobMap;
  }

  /*
   * Verarbeitet den E-Mail-Job und speichert ihn als gesendet
   */

  private void processEmail(String email, String pdfPath, String bookingId) {
    if (email == null || pdfPath == null) {
      // log("[FEHLER] Ungültige Job-Daten, Mail wird nicht gesendet.");
      return;
    }

    // log("[SIMULATION] Mail an: " + email);
    // log("[SIMULATION] PDF-Anhang: " + pdfPath);
    // log("[SIMULATION] Buchungs-ID: " + bookingId);

    try (Jedis jedis = jedisAdapter.getJedis()) { // Holt eine neue redisverbindung
                                                  // markiere die Mail als gesendet (Simulation)
      jedis.sadd("sentMails", email + " -> " + pdfPath);
      // speichere ein Log für spätere Nachverfolgung in mailLogs
      jedis.lpush("mailLogs", "Mail an: " + email + " PDF: " + pdfPath);
      // log("[OK] Mail-Log erfolgreich gespeichert!");
    } catch (Exception e) {
      // log("[FEHLER] Konnte Mail-Log nicht speichern!");
      e.printStackTrace();
    }
  }

  /*
   * Schreibt Logs in die Datei /tmp/log.txt
   * @param message Die Nachricht, die ins Log geschrieben werden soll
   *
   private void log(String message) {
   try (PrintWriter writer = new PrintWriter(new FileWriter("/tmp/log.txt", true))) {
   writer.println(java.time.LocalDateTime.now() + " - " + message);
   } catch (IOException e) {
   System.err.println("[FEHLER] Fehler beim Schreiben der Log-Datei!");
   }
   }
   */
}
